import Vapor
import FluentPostgreSQL

/// A release by an `Artist`
/// this is kinda janky for reasons that are partly my fault and partly the fault of Discog's weird API. the readme says that release details for releases in a playlist should
/// be fetched from Discogs every time a Playlist is returned, but instead of doing that, I decided to store them in the database. I could argue that I made this change
/// because it's more efficient (this way you only make one call to Discogs before storing the release, and fetch details from the database on subsequent retrievals) but
/// really, I was just running out of time and I thought this would be easier. HOWEVER. Discogs introduced problems of its own because the releases returned from the
/// Discogs Artist Releases endpoint have an `id` and a `main_release` id, but the releases returned from the Discogs Release endpoint only have an `id`, which
/// does NOT correspond to the `id` from the Artist Releases endpoint, but instead, corresponds to the `main_release` id. ridiculous. anyway, I ended up storing the
/// `main_release` id in the database as `mainRelease` but the `id` stored in the database corresponds to neither - it's autogenerated by the database (when I
/// tried saving a release that I set an id for manually, it wouldn't save to the database, and I didn't have time to figure out how to fix that, so I just left it that way). maybe
/// this would be less confusing if I made different response models for the different endpoints instead of trying to use one model for everything, but as previously stated,
/// short on time.
final class Release: PostgreSQLModel {
    typealias Database = PostgreSQLDatabase
    
    var id: Int?
    var mainRelease: Int?
    var title: String
    var thumb: String?
    
    init(id: Int? = nil, mainRelease: Int? = nil, title: String, thumb: String?) {
        self.id = id
        self.mainRelease = mainRelease
        self.title = title
        self.thumb = thumb
    }

    enum CodingKeys: String, CodingKey {
        case id
        case mainRelease = "main_release"
        case title
        case thumb
    }
}

/// Allows `Release` to be encoded to and decoded from HTTP messages.
extension Release: Content { }
